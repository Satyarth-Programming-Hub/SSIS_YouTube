<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="7/22/2021 7:28:07 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="LAPTOP-TG14SPMU"
  DTS:CreatorName="LAPTOP-TG14SPMU\SarojSatyarth"
  DTS:DTSID="{5EA8A430-EB9A-424A-ADA5-3E100DCB9D60}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.167"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package4"
  DTS:PackageType="5"
  DTS:VersionBuild="19"
  DTS:VersionGUID="{B4B03928-9F96-49E8-B0B8-EAAA2D10AD65}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{09F40697-82E2-48C6-9DD8-C6952C5C7BC2}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="EmailFrom">
      <DTS:VariableValue
        DTS:DataType="8">freelancesaty89@gmail.com</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F0CA72DD-9FBE-4ACF-86A4-50B6EC0EDB48}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="EmailFromPass">
      <DTS:VariableValue
        DTS:DataType="8">**saroj1010rao##</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{19B2F84C-7549-4389-AA06-9F4DB05C2E62}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="EmailTo">
      <DTS:VariableValue
        DTS:DataType="8">techtalk.saty@gmail.com</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Send Email VB"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{BF31288D-19A9-41F6-8A9E-2D38F5ADCBEF}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Send Email VB"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_f6ff19dbc381455c93278e3884947a0e"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="VisualBasic"
          ReadOnlyVariables="User::EmailFrom,User::EmailFromPass,User::EmailTo">
          <ProjectItem
            Name="ScriptMain.vb"
            Encoding="UTF8"><![CDATA[#Region "Help:  Introduction to the script task"
'The Script Task allows you to perform virtually any operation that can be accomplished in
'a .Net application within the context of an Integration Services control flow. 

'Expand the other regions which have "Help" prefixes for examples of specific ways to use
'Integration Services features within this script task.
#End Region


#Region "Namespaces"
Imports System
Imports System.Data
Imports Microsoft.SqlServer.Dts.Runtime
Imports System.Windows.Forms
Imports System.Data.SqlClient
Imports System.Net.Mail
#End Region

'ScriptMain is the entry point class of the script.  Do not change the name, attributes,
'or parent of this class.
<Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute()> _
<System.CLSCompliantAttribute(False)> _
Partial Public Class ScriptMain
    Inherits Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase

#Region "Help:  Using Integration Services variables and parameters in a script"
    'To use a variable in this script, first ensure that the variable has been added to 
    'either the list contained in the ReadOnlyVariables property or the list contained in 
    'the ReadWriteVariables property of this script task, according to whether or not your
    'code needs to write to the variable.  To add the variable, save this script, close this instance of
    'Visual Studio, and update the ReadOnlyVariables and 
    'ReadWriteVariables properties in the Script Transformation Editor window.
    'To use a parameter in this script, follow the same steps. Parameters are always read-only.

    'Example of reading from a variable:
    ' startTime = Dts.Variables("System::StartTime").Value

    'Example of writing to a variable:
    ' Dts.Variables("User::myStringVariable").Value = "new value"

    'Example of reading from a package parameter:
    ' batchId = Dts.Variables("$Package::batchId").Value

    'Example of reading from a project parameter:
    ' batchId = Dts.Variables("$Project::batchId").Value

    'Example of reading from a sensitive project parameter:
    ' batchId = Dts.Variables("$Project::batchId").GetSensitiveValue()
#End Region

#Region "Help:  Firing Integration Services events from a script"
    'This script task can fire events for logging purposes.

    'Example of firing an error event:
    ' Dts.Events.FireError(18, "Process Values", "Bad value", "", 0)

    'Example of firing an information event:
    ' Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, fireAgain)

    'Example of firing a warning event:
    ' Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0)
#End Region

#Region "Help:  Using Integration Services connection managers in a script"
    'Some types of connection managers can be used in this script task.  See the topic 
    '"Working with Connection Managers Programatically" for details.

    'Example of using an ADO.Net connection manager:
    ' Dim rawConnection As Object = Dts.Connections("Sales DB").AcquireConnection(Dts.Transaction)
    ' Dim myADONETConnection As SqlConnection = CType(rawConnection, SqlConnection)
    ' <Use the connection in some code here, then release the connection>
    ' Dts.Connections("Sales DB").ReleaseConnection(rawConnection)

    'Example of using a File connection manager
    ' Dim rawConnection As Object = Dts.Connections("Prices.zip").AcquireConnection(Dts.Transaction)
    ' Dim filePath As String = CType(rawConnection, String)
    ' <Use the connection in some code here, then release the connection>
    ' Dts.Connections("Prices.zip").ReleaseConnection(rawConnection)
#End Region

    'This method is called when this script task executes in the control flow.
    'Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
    'To open Help, press F1.
    ''' <summary>
    ''' This method is called when this script task executes in the control flow.
    ''' Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
    ''' To open Help, press F1.
    ''' </summary>
    Public Sub Main()
        ' TODO: Add your code here
        Try
            Dim ID As Int32 = 0
            Dim Employee_Name As String = String.Empty
            Dim Department As String = String.Empty

            Using ds As DataSet = GetEmpData(1)

                For Each row As DataRow In ds.Tables(0).Rows
                    ID = Integer.Parse(row.ItemArray(0).ToString())
                    Employee_Name = row.ItemArray(1).ToString() & ", " & row.ItemArray(2).ToString()
                    Department = row.ItemArray(8).ToString()
                Next
            End Using

            SendEmail(ID, Employee_Name, Department)
            MessageBox.Show("Email Sent!!!")
            Dts.TaskResult = ScriptResults.Success
        Catch ex As Exception
            Dts.TaskResult = ScriptResults.Failure
            Call MessageBox.Show("Email was not sent!!!!" & ex.ToString())
        End Try
    End Sub

    Public Function GetEmpData(ByVal id As Integer) As DataSet
        Dim constr As String = "Data Source=LAPTOP-TG14SPMU; Initial Catalog=SSRSDB;Integrated Security=SSPI;"
        Dim query As String = "SELECT * FROM Employee WHERE id=@ID"
        Dim cmd As SqlCommand = New SqlCommand(query)
        cmd.Parameters.AddWithValue("@ID", id)

        Using con As SqlConnection = New SqlConnection(constr)

            Using da As SqlDataAdapter = New SqlDataAdapter()
                cmd.Connection = con
                da.SelectCommand = cmd

                Using employees As DataSet = New DataSet()
                    da.Fill(employees, "Employee")
                    Return employees
                End Using
            End Using
        End Using
    End Function

    Public Sub SendEmail(ByVal ID As Integer, ByVal Employee_Name As String, ByVal Department As String)
        Dim body = String.Empty
        'string ImagePath = @"D:\Downloads\Documents\Emp.jpg";
        Dim ImagePath As String = "https://images.pexels.com/photos/4050315/pexels-photo-4050315.jpeg"
        Dim ImgWidth As String = "300"
        Dim ImgHeight As String = "300"
        Dim subject As String = "**Employee of the Month :  " & Date.Now.AddMonths(-1).ToString("MMMM") & "  " & Date.Now.Year.ToString() & "  **"
        Dim EmailFrom As String = Dts.Variables("User::EmailFrom").Value.ToString()
        Dim EmailFromPass As String = Dts.Variables("User::EmailFromPass").Value.ToString()
        Dim EmailTo As String = Dts.Variables("User::EmailTo").Value.ToString()
        Dim smtpServer As String = "smtp.gmail.com"
        Dim portNumber As Int32 = 587
        Dim enableSSL As Boolean = True

        Using mail As MailMessage = New MailMessage()
            mail.From = New MailAddress(EmailFrom)
            mail.To.Add(EmailTo)
            mail.Subject = subject
            mail.IsBodyHtml = True
            mail.Body += "<html><head><title>**Employee of the Month Award**</title></head>"
            mail.Body += "<body> Hi Team,<br/><br/>Best Employee for the Month of  <strong>" & Date.Now.AddMonths(-1).ToString("MMMM") & "  " & Date.Now.Year.ToString() & "</strong><br/>"
            mail.Body += "Employee ID: " & ID & "<br/>"
            mail.Body += "Employee Name: " & Employee_Name & "<br />"
            mail.Body += "Department: " & Department & " <br/>"
            mail.Body += "Photo <br/>"
            mail.Body += "<img src=" & ImagePath & " width=" & ImgWidth & " height=" & ImgHeight & ">"
            mail.Body += "<br/><br/>"
            mail.Body += "Best wishes " & Employee_Name & "! keep doing good work!!!"
            mail.Body += "<br/><br/>"
            mail.Body += "Many Thanks & amp; Regards,<br/>"
            mail.Body += "Satyarth Programming Hub <br/>"
            mail.Body += "Subscribe to this awosome Channel!!!</body>"
            mail.Body += "</html>"

            Using smpt As SmtpClient = New SmtpClient(smtpServer, portNumber)
                smpt.Credentials = New Net.NetworkCredential(EmailFrom, EmailFromPass)
                smpt.EnableSsl = enableSSL
                smpt.Send(mail)
            End Using
        End Using
    End Sub

#Region "ScriptResults declaration"
    ''' <summary>
    ''' This enum provides a convenient shorthand within the scope of this class for setting the
    ''' result of the script.
    ''' 
    ''' This code was generated automatically.
    ''' </summary>
    Friend Enum ScriptResults
        Success = DTSExecResult.Success
        Failure = DTSExecResult.Failure
    End Enum
#End Region

End Class]]></ProjectItem>
          <ProjectItem
            Name="ST_f6ff19dbc381455c93278e3884947a0e.vbproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{F184B08F-C81C-45F6-A57F-5ABD9991F28F}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{8E7D29C9-4A81-47A8-AE32-ACA8D8BB0A31}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>My Project</AppDesignerFolder>
    <RootNamespace>ST_f6ff19dbc381455c93278e3884947a0e</RootNamespace>
    <AssemblyName>ST_f6ff19dbc381455c93278e3884947a0e</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineDebug>true</DefineDebug>
    <DefineTrace>true</DefineTrace>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineDebug>false</DefineDebug>
    <DefineTrace>true</DefineTrace>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <Import Include="Microsoft.VisualBasic" />
    <Import Include="System" />
    <Import Include="System.Collections" />
    <Import Include="System.Data" />
    <Import Include="System.Diagnostics" />
    <Import Include="System.Windows.Forms" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="My Project\" />
    <Compile Include="My Project\AssemblyInfo.vb">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="My Project\Resources.resx">
      <Generator>VbMyResourcesResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.vb</LastGenOutput>
      <CustomToolNamespace>My.Resources</CustomToolNamespace>
    </EmbeddedResource>
    <Compile Include="My Project\Resources.Designer.vb">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
      <SubType>Code</SubType>
    </Compile>
    <None Include="My Project\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.vb</LastGenOutput>
    </None>
    <Compile Include="My Project\Settings.Designer.vb">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="ScriptMain.vb">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a VB project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.VisualBasic.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="vb" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="My Project\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)" GeneratedClassNamespace="$safeprojectname" GeneratedClassName="MySettings">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="My Project\AssemblyInfo.vb"
            Encoding="UTF8"><![CDATA[Imports System
Imports System.Reflection
Imports System.Runtime.InteropServices

' General Information about an assembly is controlled through the following 
' set of attributes. Change these attribute values to modify the information
' associated with an assembly.

' Review the values of the assembly attributes

<Assembly: AssemblyTitle("ST_f6ff19dbc381455c93278e3884947a0e")> 
<Assembly: AssemblyDescription("")> 
<Assembly: AssemblyCompany("")> 
<Assembly: AssemblyProduct("ST_f6ff19dbc381455c93278e3884947a0e")> 
<Assembly: AssemblyCopyright("Copyright @  2021")> 
<Assembly: AssemblyTrademark("")> 
<Assembly: CLSCompliant(True)> 

<Assembly: ComVisible(False)> 

'The following GUID is for the ID of the typelib if this project is exposed to COM
<Assembly: Guid("a8c1c68b-1c80-423c-9b68-1c1da2ac4c84")> 

' Version information for an assembly consists of the following four values:
'
'      Major Version
'      Minor Version 
'      Build Number
'      Revision
'
' You can specify all the values or you can default the Build and Revision Numbers 
' by using the '*' as shown below:
' <Assembly: AssemblyVersion("1.0.*")>

<Assembly: AssemblyVersion("1.0.0.0")> 
<Assembly: AssemblyFileVersion("1.0.0.0")> ]]></ProjectItem>
          <ProjectItem
            Name="My Project\Settings.Designer.vb"
            Encoding="UTF8"><![CDATA['------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



Partial Friend NotInheritable Class MySettings
    Inherits System.Configuration.ApplicationSettingsBase

    Private Shared m_Value As MySettings

    Private Shared m_SyncObject As Object = New Object

    <System.Diagnostics.DebuggerNonUserCode()> _
    Public Shared ReadOnly Property Value() As MySettings
        Get
            If (MySettings.m_Value Is Nothing) Then
                System.Threading.Monitor.Enter(MySettings.m_SyncObject)
                If (MySettings.m_Value Is Nothing) Then
                    Try
                        MySettings.m_Value = New MySettings
                    Finally
                        System.Threading.Monitor.Exit(MySettings.m_SyncObject)
                    End Try
                End If
            End If
            Return MySettings.m_Value
        End Get
    End Property
End Class]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:Language>msBuild</msb:Language>
    <msb:CodeName>ST_f6ff19dbc381455c93278e3884947a0e</msb:CodeName>
    <msb:DisplayName>ST_f6ff19dbc381455c93278e3884947a0e</msb:DisplayName>
    <msb:ProjectId>{A3434750-A66F-467A-A726-794E71C9AF78}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_f6ff19dbc381455c93278e3884947a0e.vbproj" />
    <msb:File Include="My Project\Settings.Designer.vb" />
    <msb:File Include="My Project\AssemblyInfo.vb" />
    <msb:File Include="ScriptMain.vb" />
    <msb:File Include="My Project\Resources.resx" />
    <msb:File Include="My Project\Resources.Designer.vb" />
    <msb:File Include="My Project\Settings.settings" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="My Project\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="My Project\Resources.Designer.vb"
            Encoding="UTF8"><![CDATA['------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace My.Resources
    
    '''<summary>
    '''   A strongly-typed resource class, for looking up localized strings, etc.
    '''</summary>
    'This class was auto-generated by the Strongly Typed Resource Builder
    'class via a tool like ResGen or Visual Studio.NET.
    'To add or remove a member, edit your .ResX file then rerun ResGen
    'with the /str option, or rebuild your VS project.
    Class MyResources
        
        Private Shared _resMgr As System.Resources.ResourceManager
        
        Private Shared _resCulture As System.Globalization.CultureInfo
        
        Friend Sub New()
            MyBase.New
        End Sub
        
        '''<summary>
        '''   Returns the cached ResourceManager instance used by this class.
        '''</summary>
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Shared ReadOnly Property ResourceManager() As System.Resources.ResourceManager
            Get
                If (_resMgr Is Nothing) Then
                    Dim temp As System.Resources.ResourceManager = New System.Resources.ResourceManager("My.Resources.MyResources", GetType(MyResources).Assembly)
                    _resMgr = temp
                End If
                Return _resMgr
            End Get
        End Property
        
        '''<summary>
        '''   Overrides the current thread's CurrentUICulture property for all
        '''   resource lookups using this strongly typed resource class.
        '''</summary>
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Shared Property Culture() As System.Globalization.CultureInfo
            Get
                Return _resCulture
            End Get
            Set
                _resCulture = value
            End Set
        End Property
    End Class
End Namespace]]></ProjectItem>
          <BinaryItem
            Name="ST_f6ff19dbc381455c93278e3884947a0e.dll">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
awqBAQYATicAAAAAxgJEATwBBwBWJwAAAACDANYBVAIHAGInAAAAAMYCFwWmAAcAbCcAAAAAEQBy
AFkCBwCMJwAAAAABAF4AYQIIALogAAAAAAYYpAgGAAkAmCcAAAAAAwgrAUoACQDMJwAAAAAGGKQI
BgAJAAAAAQDmBAAAAQDTAAAAAQA6AAAAAgCfAQAAAwB2CwAAAQBuBwAAAQA7AQAAAQA7AQkApAgB
ABEApAgGABkApAgKACkApAgQADEApAgQADkApAgQAEEApAgQAEkApAgQAFEApAgQAFkApAgVAGEA
pAgVAGkApAgQAHEApAgQAHkApAgQAIEApAgaAJEApAggAKkApAgGALEApAgGALkApAgGANEApAgm
AOkApAgQAAkBpAgGABEBpAgGAJkApAgGAKEApAgGAAwApAgGABQApAgGABwApAgGACQApAgGAAwA
KwFKABQAKwFKABwAKwFKACQAKwFKAMEApAgGANkAjQFPANkAGgxXAPEApAhdAIkB3QRlAAEBpAgG
AJEBGwhqAJEBNAtqABkBpAgGAJkBJwyBACEBLQqEAKEBMAaKAKkB7gqRALEBjAiXACkBgQudADEB
+guhAMEAFwWmALkBVgKqAJkB9wqvACkBoAu2AMEBTgIGAMkBwwu6ABkB2ArBANkBRgsBAOEBcAjH
ADkBFwWmAJkB9wrOAOEBXgjUAEEBpAgQAEEBtQrsAOkB0ATyAEkBpAgQAFEBpAgGAEEBIwf6AFEB
4QABASEBpAgGAPkBDgYIAVkBswsqAVkBUQowAVkBFwU3AVkBcAc8AbkBFwWmAJkB9wpAAdkBOApG
AQECMAZMAQkCvASdAGEBpAgGABECpAgQAGEBQAZTAWEBXQdaARkCzwAQAGEBCwsQAGEBEwYVAGEB
CAymAGEBEQwQACECFwVgAZkB9wplAWkBpAhtASkCpAgaAGkBWwpzAWkBIgYVAGkB8wB6AcEAawqB
AcEARAE8ATkCHAGOATQAqQulATwAvARKADwAxgS8ATwApAgGAAgALADdAQgAMADiASkAqwATBC4A
CwCRAi4AEwCaAi4AGwC5Ai4AIwDCAi4AKwDrAi4AMwDrAi4AOwDCAi4AQwDxAi4ASwDrAi4AUwAI
Ay4AWwDrAi4AYwAOAy4AawA4Ay4AcwBFA0AAiwDiAUAAgwCPA0MAewCYA0MAgwCPA0kAqwAkBGMA
ewCYA2MAgwCPA2kAqwA4BIAAiwDiAYMAkwDiAYMAmwDiAYMAewCYA4kAqwBFBKAAiwDiAakAgwC5
AsAAiwDiAckAgwC5AuAAiwDiAeMAuwDiAeMAUwDrAukAswDiAQMBgwCPAwMBowCxAyMBgwCPAyMB
WwDrAmACgwCPA2ACiwDiAYACgwCPA4ACiwDiAaACgwCPA6ACiwDiAcACgwCPA8ACiwDiAeACiwDi
AQADiwDiASADiwDiASADgwCPA0ADiwDiAWADiwDiAWADgwCPA28A2AAQAYYBmQEEAAEABQAFAAYA
BwAJAAgAAABNCGkCAACIBm4CAAAJCHMCAAD8CHgCAADdB30CAAACAoICAADmBIcCAAAvAYwCAgAE
AAMAAgAFAAUAAgAGAAcAAgAHAAkAAgAJAAsAAgAKAA0AAQALAA0AAgAOAA8AAgAaABEALgA1ADwA
QwCLAZ4BrQG0AQSAAAABAAAAAAAAAAAAAAAAAPgAAAAEAAAAAAAAAAAAAADCAbAAAAAAAAQAAAAA
AAAAAAAAAMIBOQYAAAAACgAAAAAAAAAAAAAAywG5AAAAAAAOAAAAAAAAAAAAAADUASAFAAAAAAQA
AAAAAAAAAAAAAMIBjQAAAAAABAAAAAAAAAAAAAAAwgFyCgAAAAAOAAAAAAAAAAAAAADUAT0AAAAA
AAAAAAABAAAA5gkAAAgABAAJAAQACgAHAAAAEAASAFwAAAAQAC8AXAAAAAAAMQBcAMUAlAHFALcB
AAAAQ29udGV4dFZhbHVlYDEAVGhyZWFkU2FmZU9iamVjdFByb3ZpZGVyYDEASW50MzIAPE1vZHVs
ZT4ASUQATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAFQARGlzcG9zZV9fSW5zdGFuY2Vf
XwBDcmVhdGVfX0luc3RhbmNlX18AdmFsdWVfXwBTeXN0ZW0uRGF0YQBHZXRFbXBEYXRhAFByb2pl
Y3REYXRhAG1zY29ybGliAE1pY3Jvc29mdC5WaXN1YWxCYXNpYwBBZGQAaWQAU3FsQ29tbWFuZABz
ZXRfU2VsZWN0Q29tbWFuZABTZW5kAFNUX2Y2ZmYxOWRiYzM4MTQ1NWM5MzI3OGUzODg0OTQ3YTBl
AENyZWF0ZUluc3RhbmNlAGdldF9HZXRJbnN0YW5jZQBpbnN0YW5jZQBHZXRIYXNoQ29kZQBNYWls
TWVzc2FnZQBEYXRhVGFibGUAVmFyaWFibGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUA
R2V0VHlwZUZyb21IYW5kbGUARW1wbG95ZWVfTmFtZQBEYXRlVGltZQBNaWNyb3NvZnQuU3FsU2Vy
dmVyLkR0cy5SdW50aW1lAEdldFR5cGUARmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQBf
cmVzQ3VsdHVyZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UAQXBwbGljYXRpb25CYXNlAEFw
cGxpY2F0aW9uU2V0dGluZ3NCYXNlAERpc3Bvc2UAUGFyc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUA
R3VpZEF0dHJpYnV0ZQBIZWxwS2V5d29yZEF0dHJpYnV0ZQBHZW5lcmF0ZWRDb2RlQXR0cmlidXRl
AERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JC
cm93c2FibGVBdHRyaWJ1dGUAQ29tVmlzaWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmli
dXRlAFN0YW5kYXJkTW9kdWxlQXR0cmlidXRlAEhpZGVNb2R1bGVOYW1lQXR0cmlidXRlAEFzc2Vt
Ymx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBEZWJ1Z2dlckhp
ZGRlbkF0dHJpYnV0ZQBBc3NlbWJseUZpbGVWZXJzaW9uQXR0cmlidXRlAE15R3JvdXBDb2xsZWN0
aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxh
eGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmln
aHRBdHRyaWJ1dGUAQ0xTQ29tcGxpYW50QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2lu
dEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlB
dHRyaWJ1dGUAbV9WYWx1ZQBnZXRfVmFsdWUAc2V0X1ZhbHVlAEFkZFdpdGhWYWx1ZQBHZXRPYmpl
Y3RWYWx1ZQBTeXN0ZW0uVGhyZWFkaW5nAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVG9TdHJp
bmcATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRz
LlRhc2tzLlNjcmlwdFRhc2sATmV0d29ya0NyZWRlbnRpYWwATWljcm9zb2Z0LlZpc3VhbEJhc2lj
Lk15U2VydmljZXMuSW50ZXJuYWwAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1v
ZGVsAFN5c3RlbS5OZXQuTWFpbABTZW5kRW1haWwAU1RfZjZmZjE5ZGJjMzgxNDU1YzkzMjc4ZTM4
ODQ5NDdhMGUuZGxsAEZpbGwAc2V0X0lzQm9keUh0bWwAc2V0X0VuYWJsZVNzbABnZXRfSXRlbQBT
eXN0ZW0Ac2V0X0Zyb20ARW51bQBTeXN0ZW0uQ29tcG9uZW50TW9kZWwuRGVzaWduAFNjcmlwdE1h
aW4AZ2V0X0FwcGxpY2F0aW9uAE15QXBwbGljYXRpb24AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lz
dGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24ARGF0YVRhYmxlQ29sbGVjdGlvbgBT
cWxQYXJhbWV0ZXJDb2xsZWN0aW9uAE1haWxBZGRyZXNzQ29sbGVjdGlvbgBEYXRhUm93Q29sbGVj
dGlvbgBzZXRfQ29ubmVjdGlvbgBTcWxDb25uZWN0aW9uAEV4Y2VwdGlvbgBTeXN0ZW0uRGF0YS5D
b21tb24AZ2V0X1RvAEN1bHR1cmVJbmZvAGdldF9ZZWFyAG1fQXBwT2JqZWN0UHJvdmlkZXIAbV9V
c2VyT2JqZWN0UHJvdmlkZXIAbV9Db21wdXRlck9iamVjdFByb3ZpZGVyAG1fTXlXZWJTZXJ2aWNl
c09iamVjdFByb3ZpZGVyAGdldF9SZXNvdXJjZU1hbmFnZXIAU3lzdGVtLkNvZGVEb20uQ29tcGls
ZXIAZ2V0X1VzZXIAU3FsUGFyYW1ldGVyAEVudGVyAERiRGF0YUFkYXB0ZXIAU3FsRGF0YUFkYXB0
ZXIAZ2V0X0NvbXB1dGVyAE15Q29tcHV0ZXIAX3Jlc01ncgBDbGVhclByb2plY3RFcnJvcgBTZXRQ
cm9qZWN0RXJyb3IASUVudW1lcmF0b3IAR2V0RW51bWVyYXRvcgBBY3RpdmF0b3IALmN0b3IALmNj
dG9yAE1vbml0b3IAU3lzdGVtLkRpYWdub3N0aWNzAE1pY3Jvc29mdC5WaXN1YWxCYXNpYy5EZXZp
Y2VzAGdldF9XZWJTZXJ2aWNlcwBNeVdlYlNlcnZpY2VzAE1pY3Jvc29mdC5WaXN1YWxCYXNpYy5B
cHBsaWNhdGlvblNlcnZpY2VzAFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcwBNaWNyb3Nv
ZnQuVmlzdWFsQmFzaWMuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNl
cnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfZjZmZjE5ZGJjMzgxNDU1YzkzMjc4ZTM4ODQ5NDdh
MGUuTXkuUmVzb3VyY2VzAE15UmVzb3VyY2VzAFNUX2Y2ZmYxOWRiYzM4MTQ1NWM5MzI3OGUzODg0
OTQ3YTBlLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAZ2V0X1RhYmxlcwBnZXRf
VmFyaWFibGVzAE15U2V0dGluZ3MAQWRkTW9udGhzAHNldF9DcmVkZW50aWFscwBFcXVhbHMAU3lz
dGVtLldpbmRvd3MuRm9ybXMAQ29udmVyc2lvbnMAU3lzdGVtLkNvbGxlY3Rpb25zAFJ1bnRpbWVI
ZWxwZXJzAGdldF9QYXJhbWV0ZXJzAFN1Y2Nlc3MATWFpbEFkZHJlc3MAZ2V0X0R0cwBTY3JpcHRS
ZXN1bHRzAGdldF9Sb3dzAENvbmNhdABtX1N5bmNPYmplY3QAc2V0X1N1YmplY3QATXlQcm9qZWN0
AFN5c3RlbS5OZXQARGF0YVNldABFeGl0AERpYWxvZ1Jlc3VsdABzZXRfVGFza1Jlc3VsdABTeXN0
ZW0uRGF0YS5TcWxDbGllbnQAU210cENsaWVudABEZXBhcnRtZW50AGdldF9DdXJyZW50AElDcmVk
ZW50aWFsc0J5SG9zdABNb3ZlTmV4dABtX0NvbnRleHQAZ2V0X05vdwBEYXRhUm93AFNob3cATWVz
c2FnZUJveABTVF9mNmZmMTlkYmMzODE0NTVjOTMyNzhlMzg4NDk0N2EwZS5NeQBnZXRfSXRlbUFy
cmF5AGdldF9Cb2R5AHNldF9Cb2R5AGdldF9Bc3NlbWJseQBFbXB0eQAAAAAAMU0AeQAuAFIAZQBz
AG8AdQByAGMAZQBzAC4ATQB5AFIAZQBzAG8AdQByAGMAZQBzAAAFLAAgAAAbRQBtAGEAaQBsACAA
UwBlAG4AdAAhACEAIQAALUUAbQBhAGkAbAAgAHcAYQBzACAAbgBvAHQAIABzAGUAbgB0ACEAIQAh
ACEAAICbRABhAHQAYQAgAFMAbwB1AHIAYwBlAD0ATABBAFAAVABPAFAALQBUAEcAMQA0AFMAUABN
AFUAOwAgAEkAbgBpAHQAaQBhAGwAIABDAGEAdABhAGwAbwBnAD0AUwBTAFIAUwBEAEIAOwBJAG4A
dABlAGcAcgBhAHQAZQBkACAAUwBlAGMAdQByAGkAdAB5AD0AUwBTAFAASQA7AAFHUwBFAEwARQBD
AFQAIAAqACAARgBSAE8ATQAgAEUAbQBwAGwAbwB5AGUAZQAgAFcASABFAFIARQAgAGkAZAA9AEAA
SQBEAAAHQABJAEQAABFFAG0AcABsAG8AeQBlAGUAAICFaAB0AHQAcABzADoALwAvAGkAbQBhAGcA
ZQBzAC4AcABlAHgAZQBsAHMALgBjAG8AbQAvAHAAaABvAHQAbwBzAC8ANAAwADUAMAAzADEANQAv
AHAAZQB4AGUAbABzAC0AcABoAG8AdABvAC0ANAAwADUAMAAzADEANQAuAGoAcABlAGcAAQczADAA
MAAANyoAKgBFAG0AcABsAG8AeQBlAGUAIABvAGYAIAB0AGgAZQAgAE0AbwBuAHQAaAAgADoAIAAg
AAAJTQBNAE0ATQAABSAAIAAACSAAIAAqACoAAB9VAHMAZQByADoAOgBFAG0AYQBpAGwARgByAG8A
bQAAJ1UAcwBlAHIAOgA6AEUAbQBhAGkAbABGAHIAbwBtAFAAYQBzAHMAABtVAHMAZQByADoAOgBF
AG0AYQBpAGwAVABvAAAdcwBtAHQAcAAuAGcAbQBhAGkAbAAuAGMAbwBtAACAgzwAaAB0AG0AbAA+
ADwAaABlAGEAZAA+ADwAdABpAHQAbABlAD4AKgAqAEUAbQBwAGwAbwB5AGUAZQAgAG8AZgAgAHQA
aABlACAATQBvAG4AdABoACAAQQB3AGEAcgBkACoAKgA8AC8AdABpAHQAbABlAD4APAAvAGgAZQBh
AGQAPgAAgIM8AGIAbwBkAHkAPgAgAEgAaQAgAFQAZQBhAG0ALAA8AGIAcgAvAD4APABiAHIALwA+
AEIAZQBzAHQAIABFAG0AcABsAG8AeQBlAGUAIABmAG8AcgAgAHQAaABlACAATQBvAG4AdABoACAA
bwBmACAAIAA8AHMAdAByAG8AbgBnAD4AAB08AC8AcwB0AHIAbwBuAGcAPgA8AGIAcgAvAD4AABtF
AG0AcABsAG8AeQBlAGUAIABJAEQAOgAgAAALPABiAHIALwA+AAAfRQBtAHAAbABvAHkAZQBlACAA
TgBhAG0AZQA6ACAAAA08AGIAcgAgAC8APgAAGUQAZQBwAGEAcgB0AG0AZQBuAHQAOgAgAAANIAA8
AGIAcgAvAD4AABdQAGgAbwB0AG8AIAA8AGIAcgAvAD4AABM8AGkAbQBnACAAcwByAGMAPQAADyAA
dwBpAGQAdABoAD0AABEgAGgAZQBpAGcAaAB0AD0AAAM+AAAVPABiAHIALwA+ADwAYgByAC8APgAA
GUIAZQBzAHQAIAB3AGkAcwBoAGUAcwAgAAAzIQAgAGsAZQBlAHAAIABkAG8AaQBuAGcAIABnAG8A
bwBkACAAdwBvAHIAawAhACEAIQAAQU0AYQBuAHkAIABUAGgAYQBuAGsAcwAgACYAIABhAG0AcAA7
ACAAUgBlAGcAYQByAGQAcwAsADwAYgByAC8APgAAPVMAYQB0AHkAYQByAHQAaAAgAFAAcgBvAGcA
cgBhAG0AbQBpAG4AZwAgAEgAdQBiACAAPABiAHIALwA+AABXUwB1AGIAcwBjAHIAaQBiAGUAIAB0
AG8AIAB0AGgAaQBzACAAYQB3AG8AcwBvAG0AZQAgAEMAaABhAG4AbgBlAGwAIQAhACEAPAAvAGIA
bwBkAHkAPgAADzwALwBoAHQAbQBsAD4AAAAAAKy4jHD+cLRImp4uoCNMFKUABCABAQgDIAABBSAB
ARERBCABAQ4EIAEBAgUgAgEODgUgAQERRQcgBAEODg4OBhUSJAESDAYVEiQBEggGFRIkARJlBhUS
JAESIAQgABMABwABEm0RgL0FIAASgMEHIAIBDhKAwQQAARwcBAABARwRBwcIDg4SgJESgJUSgJkS
gJ0CBg4FIAASgNEGIAESgNUIBSAAEoDZBSAAEoCVAyAAHAQgAB0cAyAADgQAAQgOBgADDg4ODgMg
AAIGAAERgOkOBSAAEoDtBgABARKAnQUAAg4ODgMAAAETBwcSgJEODhKAoRKApRKAqRKAkQUgABKA
9QcgAhKA+Q4cBiABARKApQYgAQESgKEHIAIIEoCRDhkHDw4ODg4ODg4OCAIRgK0IEoCxEoCxEoC1
BQAAEYCtBiABEYCtCAQgAQ4OAyAACAUAAQ4dDgUgABKBAQYgARKBBRwGIAEBEoEJBSAAEoENBAAB
DggHAAQODg4ODgUgAgEOCAYgAQESgRkGIAEBEoCxBCABAhwEBwEeAAIeAAUQAQAeAAQKAR4ABAcB
EwAGFRIkARMABwYVEnEBEwAGFRJxARMAAhMABAoBEwAFIAEBEwAIt3pcVhk04IkIsD9ffxHVCjoI
iYRdzYCAzJEEAAAAAAQBAAAABwYVEiQBEgwHBhUSJAESCAcGFRIkARJlBwYVEiQBEiADBhJ5AwYS
fQMGEhgCBhwCBggDBhEoBAAAEgwEAAASCAQAABJlBAAAEiAEAAASeQQAABJ9BQABARJ9BAAAEhgG
IAESgJEIBiADAQgODgQgABJtBxABAR4AHgAHMAEBARAeAAQIABIMBAgAEggECAASZQQIABIgBAgA
EnkECAASfQQIABIYBCgAEwAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MB
CAEAAgAAAAAAKAEAI1NUX2Y2ZmYxOWRiYzM4MTQ1NWM5MzI3OGUzODg0OTQ3YTBlAAAFAQAAAAAW
AQARQ29weXJpZ2h0IEAgIDIwMjEAAAUBAAEAACkBACRhOGMxYzY4Yi0xYzgwLTQyM2MtOWI2OC0x
YzFkYTJhYzRjODQAAAwBAAcxLjAuMC4wAABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjUB
AFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNQgBAAEAAAAAABgBAApN
eVRlbXBsYXRlCDExLjAuMC4wAABhAQA0U3lzdGVtLldlYi5TZXJ2aWNlcy5Qcm90b2NvbHMuU29h
cEh0dHBDbGllbnRQcm90b2NvbBJDcmVhdGVfX0luc3RhbmNlX18TRGlzcG9zZV9fSW5zdGFuY2Vf
XwAAABABAAtNeS5Db21wdXRlcgAAEwEADk15LkFwcGxpY2F0aW9uAAAMAQAHTXkuVXNlcgAAEwEA
Dk15LldlYlNlcnZpY2VzAAAAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVz
b3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwg
UHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVS
ZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAtEkAAAAAAAAAAAAAzkkAAAAgAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAMBJAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAA
AP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgA
AIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAA7AMA
AAAAAAAAAAAA7AM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEA
AAABAAAAAAAAAAEAAAAAAD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBG
AGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBEwD
AAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAACgDAAABADAAMAAwADAAMAA0AGIAMAAA
ABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUA
AAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AZgA2
AGYAZgAxADkAZABiAGMAMwA4ADEANAA1ADUAYwA5ADMAMgA3ADgAZQAzADgAOAA0ADkANAA3AGEA
MABlAAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADAALgAwAAAAcAAo
AAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwBmADYAZgBmADEAOQBkAGIAYwAzADgA
MQA0ADUANQBjADkAMwAyADcAOABlADMAOAA4ADQAOQA0ADcAYQAwAGUALgBkAGwAbAAAAEgAEgAB
AEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAgACAA
MgAwADIAMQAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAAeAAo
AAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfAGYANgBmAGYAMQA5AGQA
YgBjADMAOAAxADQANQA1AGMAOQAzADIANwA4AGUAMwA4ADgANAA5ADQANwBhADAAZQAuAGQAbABs
AAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwBmADYAZgBmADEAOQBkAGIA
YwAzADgAMQA0ADUANQBjADkAMwAyADcAOABlADMAOAA4ADQAOQA0ADcAYQAwAGUAAAA0AAgAAQBQ
AHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAOAAIAAEAQQBzAHMA
ZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAuADAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAAOA5AAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Send Html Formatted Email"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:Disabled="True"
      DTS:DTSID="{159E0DE2-C00D-4A02-8502-712B3E4FC027}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Send Html Formatted Email"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_6a441f605f0c417fbcfb4138853e6e5b"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::EmailFrom,User::EmailFromPass,User::EmailTo">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.Net.Mail;
#endregion

namespace ST_6a441f605f0c417fbcfb4138853e6e5b
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            // TODO: Add your code here
            try
            {
                int ID = 0;
                string Employee_Name = string.Empty;
                string Department = string.Empty; 

                using (DataSet ds = GetEmpData(1))
                {
                    foreach (DataRow row in ds.Tables[0].Rows)
                    {
                        ID = int.Parse(row.ItemArray[0].ToString());
                        Employee_Name = row.ItemArray[1].ToString() + ", " + row.ItemArray[2].ToString();
                        Department = row.ItemArray[8].ToString();
                    }
                }

                SendEmail(ID, Employee_Name, Department);
                MessageBox.Show("Email Sent!!!");
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                Dts.TaskResult = (int)ScriptResults.Failure;
                MessageBox.Show("Email was not sent!!!!" + ex.ToString());
            }

        }

        public DataSet GetEmpData(int id)
        {
            string constr = "Data Source=LAPTOP-TG14SPMU; Initial Catalog=SSRSDB;Integrated Security=SSPI;";
            string query = "SELECT * FROM Employee WHERE id=@ID";
            SqlCommand cmd = new SqlCommand(query);
            cmd.Parameters.AddWithValue("@ID", id);

            using (SqlConnection con = new SqlConnection(constr))
            {
                using (SqlDataAdapter da = new SqlDataAdapter())
                {
                    cmd.Connection = con;
                    da.SelectCommand = cmd;
                    using (DataSet employees = new DataSet())
                    {
                        da.Fill(employees, "Employee");
                        return employees;
                    }
                }
            }

        }


        public void SendEmail(int ID, string Employee_Name, string Department)
        {
            string body = string.Empty;
            //string ImagePath = @"D:\Downloads\Documents\Emp.jpg";
            string ImagePath = "https://images.pexels.com/photos/4050315/pexels-photo-4050315.jpeg";
            string ImgWidth = "300";
            string ImgHeight = "300";
            string subject = "**Employee of the Month :  " + DateTime.Now.AddMonths(-1).ToString("MMMM") + "  " + DateTime.Now.Year.ToString() + "  **";
            string EmailFrom = Dts.Variables["User::EmailFrom"].Value.ToString();
            string EmailFromPass = Dts.Variables["User::EmailFromPass"].Value.ToString();
            string EmailTo = Dts.Variables["User::EmailTo"].Value.ToString();

            string smtpServer = "smtp.gmail.com";
            int portNumber = 587;
            bool enableSSL = true;

            using (MailMessage mail = new MailMessage())
            {
                mail.From = new MailAddress(EmailFrom);
                mail.To.Add(EmailTo);
                mail.Subject = subject;
                mail.IsBodyHtml = true;

                mail.Body += "<html><head><title>**Employee of the Month Award**</title></head>";
                mail.Body += "<body> Hi Team,<br/><br/>Best Employee for the Month of  <strong>" + DateTime.Now.AddMonths(-1).ToString("MMMM") + "  " + DateTime.Now.Year.ToString() + "</strong><br/>";
                mail.Body += "Employee ID: " + ID + "<br/>";
                mail.Body += "Employee Name: " + Employee_Name + "<br />";
                mail.Body += "Department: " + Department + " <br/>";
                mail.Body += "Photo <br/>";
                mail.Body += "<img src=" + ImagePath + " width=" + ImgWidth + " height=" + ImgHeight + ">";
                mail.Body += "<br/><br/>";
                mail.Body += "Best wishes " + Employee_Name + "! keep doing good work!!!";
                mail.Body += "<br/><br/>";
                mail.Body += "Many Thanks & amp; Regards,<br/>";
                mail.Body += "Satyarth Programming Hub <br/>";
                mail.Body += "Subscribe to this awosome Channel!!!</body>";
                mail.Body += "</html>";

                using (SmtpClient smpt = new SmtpClient(smtpServer, portNumber))
                {
                    smpt.Credentials = new System.Net.NetworkCredential(EmailFrom, EmailFromPass);
                    smpt.EnableSsl = enableSSL;
                    smpt.Send(mail);
                }
            }
            

        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_6a441f605f0c417fbcfb4138853e6e5b.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_6a441f605f0c417fbcfb4138853e6e5b.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_6a441f605f0c417fbcfb4138853e6e5b.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_6a441f605f0c417fbcfb4138853e6e5b.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_6a441f605f0c417fbcfb4138853e6e5b.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_6a441f605f0c417fbcfb4138853e6e5b</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_6a441f605f0c417fbcfb4138853e6e5b</msb:DisplayName>
    <msb:ProjectId>{26E974DD-1CF0-420A-866B-AC08996B4B0A}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_6a441f605f0c417fbcfb4138853e6e5b.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_6a441f605f0c417fbcfb4138853e6e5b.Properties.Settings.get_Default():ST_6a441f605f0c417fbcfb4138853e6e5b.Properties.Sett" +
    "ings")]

namespace ST_6a441f605f0c417fbcfb4138853e6e5b.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_6a441f605f0c417fbcfb4138853e6e5b")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_6a441f605f0c417fbcfb4138853e6e5b")]
[assembly: AssemblyCopyright("Copyright @  2021")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="ST_6a441f605f0c417fbcfb4138853e6e5b.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{1AAC4462-D474-47F1-BACC-534CB10B9299}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_6a441f605f0c417fbcfb4138853e6e5b</RootNamespace>
    <AssemblyName>ST_6a441f605f0c417fbcfb4138853e6e5b</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <BinaryItem
            Name="ST_6a441f605f0c417fbcfb4138853e6e5b.dll">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
DCVvOQAACnKPBQBwKB8AAApvOgAAChEMJW85AAAKcucFAHAoHwAACm86AAAKEQcRCHM8AAAKEw4R
DhEEEQVzPQAACm8+AAAKEQ4RCW8/AAAKEQ4RDG9AAAAK3hgRDiwHEQ5vGwAACtwRDCwHEQxvGwAA
CtwqAAAAQTQAAAIAAAAYAwAAJAAAADwDAAAMAAAAAAAAAAIAAADxAAAAVwIAAEgDAAAMAAAAAAAA
AB4CKEEAAAoqHgIoQgAACiqufgEAAAQtHnL3BQBw0AMAAAIoQwAACm9EAAAKc0UAAAqAAQAABH4B
AAAEKhp+AgAABCoeAoACAAAEKhp+AwAABCoeAihGAAAKKi5zCgAABoADAAAEKgAAQlNKQgEAAQAA
AAAADAAAAHY0LjAuMzAzMTkAAAAABQBsAAAAvAUAACN+AAAoBgAAjAgAACNTdHJpbmdzAAAAALQO
AABsBgAAI1VTACAVAAAQAAAAI0dVSUQAAAAwFQAAUAIAACNCbG9iAAAAAAAAAAIAAAFXHaIBCQMA
AAD6ATMAFgAAAQAAADcAAAAFAAAABgAAAAsAAAAFAAAARgAAAAIAAAAQAAAAAwAAAAIAAAADAAAA
BAAAAAEAAAAGAAAAAQAAAAEAAAAAAFkEAQAAAAAABgDQAjUGBgBfAzUGBgAcAiIGDwCpBgAABgBJ
AgIFBgCzAgIFBgCUAgIFBgBGAwIFBgDwAgIFBgAJAwIFBgBgAgIFBgB7ApoDCgAkA9wDCgByAdwD
DgCyBzoABgD7BTgHDgA+CDoABgDWAKwEBgCEBawEDgCFAOIHDgB2BeIHDgDsBeIHBgAUAawEEgC3
AD8EEgD4Bz8EBgC8BKwEBgD/ASIGBgCUB6wEBgDBBVUGBgCoBe0EEgDPASkEEgAwAikEEgCpAdgE
BgDkATUGBgC2A6wEDgAUBToADgDDADoADgBVBToADgCOAToABgABAKwEFgBLCCMHFgDGByMHCgAX
BNwDDgAoBeIHDgDRBeIHDgDeBY4FGgD2Bh0BGgDNAB0BEgBiBz8EEgA/BT8EEgAFBKcHEgAaCKcH
BgA9AawEBgDiAKwEBgB6CAIFAAAAAAcAAAAAAAEAAQABABAAzQRRADkAAQABAAAAEABcBrgGcQAB
AAUAAAEQAAAHuAaFAAMACQADAQAAdgcAAGkABAAMABEAwQRHAREAYgFLAREApwBPAQYGMgBTAVaA
WgdWAVaAQgFWAVAgAAAAAIYA0wQGAAEAhCEAAAAAhgBGAFoBAQA0IgAAAACGAE8EYAECAMwlAAAA
AIYYFQYGAAUA1CUAAAAAgxgVBgYABQDcJQAAAACTCL0FZwEFAAgmAAAAAJMISgFsAQUADyYAAAAA
kwhWAXEBBQAXJgAAAACWCLoHdwEGAB4mAAAAAIYYFQYGAAYAJiYAAAAAkRgbBnwBBgAAAAEAggAA
AAEAEAAAAAIABgEAAAMAAwgAAAEAlAMJABUGAQARABUGBgAZABUGCgApABUGEAAxABUGEAA5ABUG
EABBABUGEABJABUGEABRABUGEABZABUGEABhABUGEABpABUGBgDZABUGBgABARUGFQARARUGBgAZ
AYMIKwB5AOcGLgAhAaMENAApAYQHOwA5AQcGQQCBAA4IRgCJAFYISgDhALQDTwBBAckBUwAZAY0H
WACBAC0IXwCRAMEBBgBJAUYIYwBxAG4HagBZAdMHAQAZAY0HcAChABUGEAChAEsHgwBhAYcDiQCp
ABUGEACxABUGBgChAGcFkQCxAJAAlwB5ABUGBgBxAYEEnQC5ADYIugC5AAkHvwC5ALQDxQC5ALQF
ygBBAbQDTwAZAY0HzgBZAfIG1AB5AaME2gCBAX0DRgDBABUGBgCJARUGEADBALME4QDBAKEF6ACR
AX4AEADBAJsHEADBAIYE7gDBAGQITwDBAG0IEAAZAY0H8wDJABUG+wCZARUGAQHJABMHBwHJAJUE
7gDJAKIADgFxABUGBgDhABUGBgCpAfQAFAGpAXYIHQHpABUGIwEJARUGBgAIABQAPQEIABgAQgEp
AHMAtwEuAAsAjwEuABMAmAEuABsAtwEuACMAwAEuACsA6QEuADMA6QEuADsA6QEuAEMAwAEuAEsA
7wEuAFMA6QEuAFsABgJDAGMAQgFJAHMAtwFhAHsAQgFjAGsAQgEbAHYApAADAAEABAADAAAAwQWA
AQAAagGFAQAAvgeKAQIABgADAAIABwAFAAEACAAFAAIACQAHAASAAAABAAAAwh62XgAAAAAAAFEA
AAAEAAAAAAAAAAAAAAArAXUAAAAAAA4AAAAAAAAAAAAAADQBvQMAAAAABAAAAAAAAAAAAAAAKwE6
AAAAAAAEAAAAAAAAAAAAAAArAawEAAAAAAQAAAAAAAAAAAAAACsBIwcAAAAADgAAAAAAAAAAAAAA
NAETAAAAAAAAAAAAAQAAAGYGAAAFAAIAAAAAAABJbnQzMgA8TW9kdWxlPgBJRABNaWNyb3NvZnQu
U3FsU2VydmVyLk1hbmFnZWREVFMAdmFsdWVfXwBTeXN0ZW0uRGF0YQBHZXRFbXBEYXRhAFNUXzZh
NDQxZjYwNWYwYzQxN2ZiY2ZiNDEzODg1M2U2ZTViAG1zY29ybGliAEFkZABpZABTcWxDb21tYW5k
AHNldF9TZWxlY3RDb21tYW5kAFNlbmQAZGVmYXVsdEluc3RhbmNlAE1haWxNZXNzYWdlAERhdGFU
YWJsZQBWYXJpYWJsZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhh
bmRsZQBFbXBsb3llZV9OYW1lAERhdGVUaW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRp
bWUAVHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBW
U1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAQXBw
bGljYXRpb25TZXR0aW5nc0Jhc2UARGlzcG9zZQBQYXJzZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBD
b21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERl
YnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVB
dHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmli
dXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0
cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0
cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2lu
dEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlB
dHRyaWJ1dGUAZ2V0X1ZhbHVlAEFkZFdpdGhWYWx1ZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJz
aW9uaW5nAFRvU3RyaW5nAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQu
U3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAE5ldHdvcmtDcmVkZW50aWFsAFNjcmlwdE9i
amVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTeXN0ZW0uTmV0Lk1haWwAU2VuZEVtYWls
AFNUXzZhNDQxZjYwNWYwYzQxN2ZiY2ZiNDEzODg1M2U2ZTViLmRsbABGaWxsAHNldF9Jc0JvZHlI
dG1sAHNldF9FbmFibGVTc2wAZ2V0X0l0ZW0AU3lzdGVtAHNldF9Gcm9tAEVudW0AcmVzb3VyY2VN
YW4AU2NyaXB0TWFpbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBT
eXN0ZW0uUmVmbGVjdGlvbgBEYXRhVGFibGVDb2xsZWN0aW9uAFNxbFBhcmFtZXRlckNvbGxlY3Rp
b24ATWFpbEFkZHJlc3NDb2xsZWN0aW9uAERhdGFSb3dDb2xsZWN0aW9uAHNldF9Db25uZWN0aW9u
AFNxbENvbm5lY3Rpb24ARXhjZXB0aW9uAFN5c3RlbS5EYXRhLkNvbW1vbgBnZXRfVG8AQ3VsdHVy
ZUluZm8AZ2V0X1llYXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBTcWxQYXJhbWV0ZXIARGJEYXRhQWRh
cHRlcgBTcWxEYXRhQWRhcHRlcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5jdG9yAC5jY3Rv
cgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0
ZW0uUmVzb3VyY2VzAFNUXzZhNDQxZjYwNWYwYzQxN2ZiY2ZiNDEzODg1M2U2ZTViLlByb3BlcnRp
ZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF82YTQ0MWY2MDVmMGM0MTdm
YmNmYjQxMzg4NTNlNmU1Yi5Qcm9wZXJ0aWVzAGdldF9UYWJsZXMAZ2V0X1ZhcmlhYmxlcwBTZXR0
aW5ncwBBZGRNb250aHMAc2V0X0NyZWRlbnRpYWxzAFN5c3RlbS5XaW5kb3dzLkZvcm1zAFN5c3Rl
bS5Db2xsZWN0aW9ucwBnZXRfUGFyYW1ldGVycwBTdWNjZXNzAE1haWxBZGRyZXNzAGdldF9EdHMA
U2NyaXB0UmVzdWx0cwBnZXRfUm93cwBDb25jYXQAT2JqZWN0AHNldF9TdWJqZWN0AFN5c3RlbS5O
ZXQARGF0YVNldABnZXRfRGVmYXVsdABEaWFsb2dSZXN1bHQAc2V0X1Rhc2tSZXN1bHQAU3lzdGVt
LkRhdGEuU3FsQ2xpZW50AFNtdHBDbGllbnQARGVwYXJ0bWVudABnZXRfQ3VycmVudABJQ3JlZGVu
dGlhbHNCeUhvc3QATW92ZU5leHQAZ2V0X05vdwBEYXRhUm93AFNob3cATWVzc2FnZUJveABnZXRf
SXRlbUFycmF5AGdldF9Cb2R5AHNldF9Cb2R5AGdldF9Bc3NlbWJseQBFbXB0eQAAAAAABSwAIAAA
G0UAbQBhAGkAbAAgAFMAZQBuAHQAIQAhACEAAC1FAG0AYQBpAGwAIAB3AGEAcwAgAG4AbwB0ACAA
cwBlAG4AdAAhACEAIQAhAACAm0QAYQB0AGEAIABTAG8AdQByAGMAZQA9AEwAQQBQAFQATwBQAC0A
VABHADEANABTAFAATQBVADsAIABJAG4AaQB0AGkAYQBsACAAQwBhAHQAYQBsAG8AZwA9AFMAUwBS
AFMARABCADsASQBuAHQAZQBnAHIAYQB0AGUAZAAgAFMAZQBjAHUAcgBpAHQAeQA9AFMAUwBQAEkA
OwABR1MARQBMAEUAQwBUACAAKgAgAEYAUgBPAE0AIABFAG0AcABsAG8AeQBlAGUAIABXAEgARQBS
AEUAIABpAGQAPQBAAEkARAAAB0AASQBEAAARRQBtAHAAbABvAHkAZQBlAACAhWgAdAB0AHAAcwA6
AC8ALwBpAG0AYQBnAGUAcwAuAHAAZQB4AGUAbABzAC4AYwBvAG0ALwBwAGgAbwB0AG8AcwAvADQA
MAA1ADAAMwAxADUALwBwAGUAeABlAGwAcwAtAHAAaABvAHQAbwAtADQAMAA1ADAAMwAxADUALgBq
AHAAZQBnAAEHMwAwADAAADcqACoARQBtAHAAbABvAHkAZQBlACAAbwBmACAAdABoAGUAIABNAG8A
bgB0AGgAIAA6ACAAIAAACU0ATQBNAE0AAAUgACAAAAkgACAAKgAqAAAfVQBzAGUAcgA6ADoARQBt
AGEAaQBsAEYAcgBvAG0AACdVAHMAZQByADoAOgBFAG0AYQBpAGwARgByAG8AbQBQAGEAcwBzAAAb
VQBzAGUAcgA6ADoARQBtAGEAaQBsAFQAbwAAHXMAbQB0AHAALgBnAG0AYQBpAGwALgBjAG8AbQAA
gIM8AGgAdABtAGwAPgA8AGgAZQBhAGQAPgA8AHQAaQB0AGwAZQA+ACoAKgBFAG0AcABsAG8AeQBl
AGUAIABvAGYAIAB0AGgAZQAgAE0AbwBuAHQAaAAgAEEAdwBhAHIAZAAqACoAPAAvAHQAaQB0AGwA
ZQA+ADwALwBoAGUAYQBkAD4AAICDPABiAG8AZAB5AD4AIABIAGkAIABUAGUAYQBtACwAPABiAHIA
LwA+ADwAYgByAC8APgBCAGUAcwB0ACAARQBtAHAAbABvAHkAZQBlACAAZgBvAHIAIAB0AGgAZQAg
AE0AbwBuAHQAaAAgAG8AZgAgACAAPABzAHQAcgBvAG4AZwA+AAAdPAAvAHMAdAByAG8AbgBnAD4A
PABiAHIALwA+AAAbRQBtAHAAbABvAHkAZQBlACAASQBEADoAIAAACzwAYgByAC8APgAAH0UAbQBw
AGwAbwB5AGUAZQAgAE4AYQBtAGUAOgAgAAANPABiAHIAIAAvAD4AABlEAGUAcABhAHIAdABtAGUA
bgB0ADoAIAAADSAAPABiAHIALwA+AAAXUABoAG8AdABvACAAPABiAHIALwA+AAATPABpAG0AZwAg
AHMAcgBjAD0AAA8gAHcAaQBkAHQAaAA9AAARIABoAGUAaQBnAGgAdAA9AAADPgAAFTwAYgByAC8A
PgA8AGIAcgAvAD4AABlCAGUAcwB0ACAAdwBpAHMAaABlAHMAIAAAMyEAIABrAGUAZQBwACAAZABv
AGkAbgBnACAAZwBvAG8AZAAgAHcAbwByAGsAIQAhACEAAEFNAGEAbgB5ACAAVABoAGEAbgBrAHMA
IAAmACAAYQBtAHAAOwAgAFIAZQBnAGEAcgBkAHMALAA8AGIAcgAvAD4AAD1TAGEAdAB5AGEAcgB0
AGgAIABQAHIAbwBnAHIAYQBtAG0AaQBuAGcAIABIAHUAYgAgADwAYgByAC8APgAAV1MAdQBiAHMA
YwByAGkAYgBlACAAdABvACAAdABoAGkAcwAgAGEAdwBvAHMAbwBtAGUAIABDAGgAYQBuAG4AZQBs
ACEAIQAhADwALwBiAG8AZAB5AD4AAA88AC8AaAB0AG0AbAA+AABxUwBUAF8ANgBhADQANAAxAGYA
NgAwADUAZgAwAGMANAAxADcAZgBiAGMAZgBiADQAMQAzADgAOAA1ADMAZQA2AGUANQBiAC4AUABy
AG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAAAAAz5ggBpVjbQoKwLZSZG6q2
AAQgAQEIAyAAAQUgAQEREQQgAQEOBSABARF9DwcICA4OEj0SQRJFEkkSTQIGDgUgABKAkQYgARKA
lQgFIAASgJkEIAASQQMgABwEIAAdHAMgAA4EAAEIDgYAAw4ODg4DIAACBgABEYCpDgUgABKArQUA
Ag4ODgwHBRJRElUSWRI9Ej0FIAASgLEHIAISgLUOHAUgAQESVQUgAQESUQYgAggSPQ4VBw8ODg4O
Dg4ODggCEV0IEmESYRJlBAAAEV0FIAERXQgEIAEODgMgAAgFAAEOHQ4FIAASgL0GIAESgMEcBiAB
ARKAxQUgABKAyQQgAQECBwAEDg4ODg4FIAIBDggFIAIBDg4GIAEBEoDRBSABARJhCAABEoDVEYDZ
BSAAEoDdByACAQ4SgN0It3pcVhk04IkIiYRdzYCAzJEEAAAAAAQBAAAAAwYSdQMGEnkDBhIQAgYI
AwYRFAUgARI9CAYgAwEIDg4EAAASdQQAABJ5BQABARJ5BAAAEhADAAABBAgAEnUECAASeQQIABIQ
CAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTVF82
YTQ0MWY2MDVmMGM0MTdmYmNmYjQxMzg4NTNlNmU1YgAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAy
MDIxAABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjUBAFQOFEZyYW1ld29ya0Rpc3BsYXlO
YW1lEi5ORVQgRnJhbWV3b3JrIDQuNbQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5S
ZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFs
LCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGlt
ZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAACUPgAAAAAAAAAAAACuPgAAACAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAoD4AAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAA
AAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQ
AAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhA
AAAaBAAAAAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv
/gAAAQAAAAEAtl7CHgAAAQC2XsIePwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYA
YQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAA
ALAEegMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQA
YgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBh
AG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQA
XwA2AGEANAA0ADEAZgA2ADAANQBmADAAYwA0ADEANwBmAGIAYwBmAGIANAAxADMAOAA4ADUAMwBl
ADYAZQA1AGIAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANwA4ADcA
NAAuADIANAAyADQANgAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwA2
AGEANAA0ADEAZgA2ADAANQBmADAAYwA0ADEANwBmAGIAYwBmAGIANAAxADMAOAA4ADUAMwBlADYA
ZQA1AGIALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBw
AHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADIAMQAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUA
bQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAA
AFMAVABfADYAYQA0ADQAMQBmADYAMAA1AGYAMABjADQAMQA3AGYAYgBjAGYAYgA0ADEAMwA4ADgA
NQAzAGUANgBlADUAYgAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABT
AFQAXwA2AGEANAA0ADEAZgA2ADAANQBmADAAYwA0ADEANwBmAGIAYwBmAGIANAAxADMAOAA4ADUA
MwBlADYAZQA1AGIAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAu
ADcAOAA3ADQALgAyADQAMgA0ADYAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMA
aQBvAG4AAAAxAC4AMAAuADcAOAA3ADQALgAyADQAMgA0ADYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAAwD4AAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="208,66.4"
          Id="Package\Send Html Formatted Email"
          TopLeft="83.571429994642,78.7647069869981" />
        <NodeLayout
          Size="146.4,41.6"
          Id="Package\Send Email VB"
          TopLeft="354.285720319164,86.4117659177748" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>